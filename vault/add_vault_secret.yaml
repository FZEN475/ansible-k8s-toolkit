---
#vault:
#  path: ns/resource/secret
#  secrets:
#    - s1
#    - s2
#    - s3
#
#ss:
#  access:
#    - s1
#    - s2
#    - s3
#
#es1:
#  ns: 1
#  secrets:
#    - s1
#    - s2
#
#es2:
#  ns: 2
#  secrets:
#    - s2
#    - s3


# Входные
## Обязательные
- debug: var=ns
- debug: var=resource

- debug: var=list

## Не обязательные
- debug: var=cluster_access
- debug: var=sa
- debug: var=store_name

# Промежуточные
- name: Facts.
  ansible.builtin.set_fact:
    service_account: "{% if (sa1 is defined) %}{{ sa1 }}{% else %}{{ resource }}-sa{% endif %}"
    access: "{% if (cluster_access is defined) %}{{ cluster_access }}{% else %}false{% endif %}"
    ss_type: "{% if (cluster_access is true) %}ClusterSecretStore{% else %}SecretStore{% endif %}"
    ss_name: |
      {% if (store_name is defined) %}
        {{ store_name }}
      {% else %}
        {% if (cluster_access is true) %}
          {{ ns }}-{{ resource }}-css
        {% else %}
          {{ resource }}-ss
        {% endif %}
      {% endif %}

- debug: var=service_account
## Выясняем доступ
- debug: var=access
- debug: var=ss_type
- debug: var=ss_name

- name: Vault secrets.
  ansible.builtin.set_fact:
    keys: " \"{{ secret_data.key }}\": \"{{ secret_data.value }}\" "
  register: vault_secrets
  when: (list | length  > 0) and secret_data.vault is true
  loop: "{{ list }}"
  loop_control:
    label: "{{ secret_data }}"
    loop_var: secret_data

- debug: var=vault_secrets

- debug: var=vault_secrets.results

- name: Print IPPool_dump
  ansible.builtin.debug:
    msg: "{{ vault_secrets.results | map(attribute='ansible_loop_var') | join(',') }}"

- debug: var="{{ vault_secrets.results | map(attribute='ansible_facts.keys') | join(',') }}"


#- name: Secrets.
#  ansible.builtin.set_fact:
#    keys: " \"{{ secret_data.key }}\": \"{{ secret_data.value }}\" "
#  register: keys_result
#  loop: "{{ list }}"
#  loop_control:
#    label: "{{ secret_data }}"
#    loop_var: secret_data
#  when: delete is false and (list | length  > 0)
#
#- debug: var=keys_result
#
#- name: Remove ConfigMap add-secret-script
#  kubernetes.core.k8s:
#    state: absent
#    definition:
#      apiVersion: v1
#      kind: ConfigMap
#      metadata:
#        name: add-secret-script
#        namespace: secrets
#
#- name: Create ConfigMap add-secret-script
#  kubernetes.core.k8s:
#    state: present
#    definition:
#      apiVersion: v1
#      kind: ConfigMap
#      metadata:
#        name: add-secret-script
#        namespace: secrets
#      data:
#        add-secret-script.sh: "{{ lookup('ansible.builtin.file', '/source/playbooks/library/vault/add-secret-script.sh') }}"
#
#- name: Remove Job
#  kubernetes.core.k8s:
#    state: absent
#    wait: true
#    definition:
#      apiVersion: batch/v1
#      kind: Job
#      metadata:
#        name: "init-secrets-{{ namespace_secret }}-{{ resource }}-{{ name_secret }}"
#        namespace: secrets
#
#- name: Create Job
#  kubernetes.core.k8s:
#    state: present
#    wait: true
#    definition:
#      apiVersion: batch/v1
#      kind: Job
#      metadata:
#        name: "init-secrets-{{ namespace_secret }}-{{ resource }}-{{ name_secret }}"
#        namespace: secrets
#      spec:
#        backoffLimit: 1200
#        ttlSecondsAfterFinished: 120
#        template:
#          spec:
#            containers:
#              - name: post-start
#                image: "curlimages/curl"
#                command: [sh, -c]
#                args:
#                  - "/tmp/add-secret-script.sh {{ namespace_secret }} {{ resource }} {% if (sa is defined) %}{{ sa }}{% else %}{{ resource }}-sa{% endif %} {{ name_secret }} "
#                env:
#                  - name: LIST
#                    value: "{{ keys_result.results | map(attribute='ansible_facts.keys') | join(',') }}"
#                volumeMounts:
#                  - mountPath: "/tmp/certs/"
#                    name: cm-vault-tls
#                    readOnly: true
#                  - mountPath: "/tmp/token"
#                    name: vault
#                    subPath: token
#                    readOnly: true
#                  - mountPath: "/tmp/add-secret-script.sh"
#                    name: add-secret-script
#                    subPath: add-secret-script.sh
#                    readOnly: true
#            restartPolicy: Never
#            volumes:
#              - name: cm-vault-tls
#                secret:
#                  secretName: cm-vault-tls
#              - name: vault
#                secret:
#                  secretName: vault
#                  items:
#                    - key: token
#                      path: token
#                      mode: 0666
#              - name: add-secret-script
#                configMap:
#                  name: add-secret-script
#                  items:
#                    - key: add-secret-script.sh
#                      path: add-secret-script.sh
#                      mode: 0777
#  when: delete is false and update_secret is true and (list | length  > 0)

#- name: Create "{{ namespace_secret }}" namespace
#  kubernetes.core.k8s:
#    name: "{{ ns }}"
#    api_version: v1
#    kind: Namespace
#    state: present
#
#- name: Create ss
#  kubernetes.core.k8s:
#    state: present
#    wait: true
#    definition:
#      apiVersion: external-secrets.io/v1beta1
#      kind: "{{ ss_type }}"
#      metadata:
#        name: "{{ ss_name | replace('/n','') | trim }}"
#        namespace: "{{ ns }}"
#      spec:
#        retrySettings:
#          retryInterval: "10s"
#        provider:
#          vault:
#            server: "https://vault.secrets.svc:8200"
#            version: "v2"
#            namespace: "{{ ns }}"
#            caProvider:
#              type: "Secret"
#              name: "vault-ca"
#              key: "ca.crt"
#            auth:
#              kubernetes:
#                mountPath: "kubernetes"
#                role: "{{ resource }}"
#                # Optional service account reference
#                serviceAccountRef:
#                  name: "{% if (sa is defined) %}{{ sa }}{% else %}{{ resource }}-sa{% endif %}"
#                  namespace: "{{ ns }}"
#  when: (vault_secrets | length  > 0)

#
#- name: Create ExternalSecrets
#  kubernetes.core.k8s:
#    state: present
#    wait: true
#    definition:
#      apiVersion: external-secrets.io/v1beta1
#      kind: ExternalSecret
#      metadata:
#        name: "{{ item.name_secret }}-secrets-es"
#        namespace: "{{ item.namespace_secret }}"
#      spec:
#        secretStoreRef:
#          name: "{% if (item.cluster_access) %}{{ item.resource }}-css{% else %}{{ item.resource }}-ss{% endif %}"
#          kind: "{% if (item.cluster_access) %}ClusterSecretStore{% else %}SecretStore{% endif %}"
#        refreshInterval: "1m"
#        target:
#          name: "{{ item.name_secret }}-secrets"
#          creationPolicy: Owner
#          deletionPolicy: Delete
#          template:
#            data: "{% if (item.template_data is defined) %}{{ item.template_data }}{% else %}{}{% endif %}"
#            type: Opaque # or TLS...
#            metadata:
#              annotations: { }
#              labels: { }
#        data: "{{ item.data }}"
#  with_items: "{{ secrets }}"
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
## Удаление секрета
#- name: Удаление ss
#  kubernetes.core.k8s:
#    state: absent
#    wait: true
#    definition:
#      apiVersion: external-secrets.io/v1beta1
#      kind: SecretStore
#      metadata:
#        name: "{{ resource }}-ss"
#        namespace: "{{ namespace_secret }}"
#  when: delete is true and cluster_access is false
#
#- name: Удаление ss
#  kubernetes.core.k8s:
#    state: absent
#    wait: true
#    definition:
#      apiVersion: external-secrets.io/v1beta1
#      kind: ClusterSecretStore
#      metadata:
#        name: "{{ resource }}-css"
#  when: delete is true and cluster_access is true
#
#- name: Ресурсы helm
#  ansible.builtin.set_fact:
#    helm_resource_delete: |
#      curl -k --cacert /tmp/certs/ca.crt \
#      --header "X-Vault-Token: $(cat /tmp/token)" \
#      --request DELETE \
#      https://vault.secrets.svc:8200/v1/{{ namespace_secret }}/data/{{ resource }}/{{ name_secret }};
#  when: delete is true
#
#- name: Job удаления секретов
#  kubernetes.core.k8s:
#    state: absent
#    wait: true
#    definition:
#      apiVersion: batch/v1
#      kind: Job
#      metadata:
#        name: "init-secrets-{{ namespace_secret }}-{{ resource }}-{{ name_secret }}-delete"
#        namespace: secrets
#  when: delete is true
#
#- name: Job удаления секретов
#  kubernetes.core.k8s:
#    state: present
#    wait: true
#    definition:
#      apiVersion: batch/v1
#      kind: Job
#      metadata:
#        name: "init-secrets-{{ namespace_secret }}-{{ resource }}-{{ name_secret }}-delete"
#        namespace: secrets
#      spec:
#        backoffLimit: 5
#        ttlSecondsAfterFinished: 120
#        template:
#          spec:
#            containers:
#              - name: post-start
#                image: "curlimages/curl"
#                command: [sh, -c]
#                args:
#                  - "{{ helm_resource_delete }}"
#                volumeMounts:
#                  - mountPath: "/tmp/certs/"
#                    name: cm-vault-tls
#                    readOnly: true
#                  - mountPath: "/tmp/token"
#                    name: vault
#                    subPath: token
#                    readOnly: true
#            restartPolicy: Never
#            volumes:
#              - name: cm-vault-tls
#                secret:
#                  secretName: cm-vault-tls
#              - name: vault
#                secret:
#                  secretName: vault
#                  items:
#                    - key: token
#                      path: token
#                      mode: 0640
#  when: delete is true
