---
- name: Check item cert
  ansible.builtin.stat:
    path: "{{ loop_certs }}"
  loop:
    - "{{ item.path }}{{ item.name }}.csr"
    - "{{ item.path }}{{ item.name }}-key.pem"
    - "{{ item.path }}{{ item.name }}.crt"
    - "{{ item.path }}{{ item.name }}.pem"
  loop_control:
    label: "{{ loop_certs }}"
    loop_var: loop_certs
  register: file

- name: Check all item_cert files exists
  set_fact:
    item_cert: "{{ file | community.general.json_query('results[*].stat.exists') }}"

- name: Create item directory (item_cert absent or renew)
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '0644'
  when: false in item_cert or item_renew is true

- name: Generate item private key (item_cert absent or renew)
  community.crypto.openssl_privatekey:
    path: "{{ item.path }}{{ item.name }}-key.pem"
    type: RSA
    size: 4096
    state: present
    force: true
  when: false in item_cert or item_renew is true

- name: Generate item CSR (error if client config) (item_cert absent or renew)
  community.crypto.openssl_csr:
    path: "{{ item.path }}{{ item.name }}.csr"
    privatekey_path: "{{ item.path }}{{ item.name }}-key.pem"
    common_name: "{{ item.name }}"
    key_usage: "{{ item.key_usage }}"
    key_usage_critical: true
    extended_key_usage: "{{ item.extended_key_usage }}"
    extended_key_usage_critical: false
    subject_alt_name: "{{ item.subject_alt_name }}"
    subject_alt_name_critical: false
    force: true
  ignore_errors: true
  register: item_csr
  when: false in item_cert or item_renew is true

- name: Generate item CSR (ignore if server config) (item_cert absent or renew)
  community.crypto.openssl_csr:
    path: "{{ item.path }}{{ item.name }}.csr"
    privatekey_path: "{{ item.path }}{{ item.name }}-key.pem"
    common_name: "client"
    key_usage: "{{ item.key_usage }}"
    key_usage_critical: false
    extended_key_usage: "{{ item.extended_key_usage }}"
    extended_key_usage_critical: false
    force: true
  when: (false in item_cert or item_renew is true) and item_csr.failed is true

- name: "Generate cert and chain with owner ca"
  community.crypto.x509_certificate:
    path: "{{ item.path }}{{ item.name }}.crt"
    csr_path: "{{ item.path }}{{ item.name }}.csr"
    ownca_path: "{{ path_ca.path }}{{ path_ca.name }}.pem"
    ownca_privatekey_path: "{{ path_ca.path }}{{ path_ca.name }}-key.pem"
    provider: ownca
    force: true
  when: false in item_cert or item_renew is true

- name: "Convert crt X.509 certificate to pem format"
  community.crypto.x509_certificate_convert:
    src_path: "{{ item.path }}{{ item.name }}.crt"
    dest_path: "{{ item.path }}{{ item.name }}.pem"
    format: pem
  register: tmp
  when: false in item_cert or item_renew is true
