- name: Debug policy_name
  ansible.builtin.debug:
    var: policy_name

- name: Debug ns
  ansible.builtin.debug:
    var: ns

- name: Debug ns_name
  ansible.builtin.debug:
    var: ns_name

- name: Debug service
  ansible.builtin.debug:
    var: service

- name: Debug service_name
  ansible.builtin.debug:
    var: service_name

- name: Debug service
  ansible.builtin.debug:
    var: path

- name: Debug path_name
  ansible.builtin.debug:
    var: path_name

- name: Debug record_list
  ansible.builtin.debug:
    var: record_list

- name: Initialize record_list_entry
  ansible.builtin.set_fact:
    create_ss: true
    compiled_secret_data: >-
      {{
        compiled_secret_data | default({}) | combine({
          policy_name: (
            compiled_secret_data[policy_name] | default({}) | combine({
              (policy_name ~ '-' ~ path_name): (
                {
                  'data': (record_entry.extra_parameters | default({})).get('data', ''),
                  'list': (
                    (
                      (compiled_secret_data[policy_name] | default({}))
                      .get(policy_name ~ '-' ~ path_name, {'data': '', 'list': []})
                      .list
                    ) + [
                      {
                        'secretKey': (record_entry.extra_parameters | default({})).get('secretKey', record_entry.name),
                        'remoteRef': {
                          'conversionStrategy': 'Default',
                          'decodingStrategy': (record_entry.extra_parameters | default({})).get('decodingStrategy', None),
                          'key': ns_name ~ '/' ~ service_name ~ '/' ~ path_name,
                          'metadataPolicy': 'None',
                          'property': record_entry.name
                        }
                      }
                    ]
                  )
                }
              )
            })
          )
        })
      }}
  loop: "{{ record_list }}"
  loop_control:
    loop_var: record_entry
      
- name: Initialize record_list_entry
  ansible.builtin.set_fact:
    create_ss: true
    compiled_policy_data: >-
      {{
        compiled_policy_data | default({}) | combine({
          policy_name: (
            compiled_policy_data[policy_name] | default({'data': '', 'list': []}) | combine({
              'data': (
                (record_entry.extra_parameters | default({})).get('data', '')
                or compiled_policy_data[policy_name].get('data', '')
                if compiled_policy_data.get(policy_name)
                else (record_entry.extra_parameters | default({})).get('data', '')
              ),
              'list': (
                (
                  compiled_policy_data[policy_name].get('list', [])
                  if compiled_policy_data.get(policy_name)
                  else []
                ) + [
                  {
                    'secretKey': (record_entry.extra_parameters | default({})).get('secretKey', record_entry.name),
                    'remoteRef': {
                      'conversionStrategy': 'Default',
                      'decodingStrategy': (record_entry.extra_parameters | default({})).get('decodingStrategy', None),
                      'key': ns_name ~ '/' ~ service_name ~ '/' ~ path_name,
                      'metadataPolicy': 'None',
                      'property': record_entry.name
                    }
                  }
                ]
              )
            })
          )
        })
      }}
  loop: "{{ record_list }}"
  loop_control:
    loop_var: record_entry
      
- name: Initialize record_list_entry
  ansible.builtin.set_fact:
    create_ss: true
    compiled_role_data: >-
      {{
        (compiled_role_data | default({'data': '', 'list': []})) | combine({
          'data': (
            (record_entry.extra_parameters | default({})).get('data', '')
            or compiled_role_data.get('data', '')
          ),
          'list': (
            (compiled_role_data.get('list', [])) + [
              {
                'secretKey': (record_entry.extra_parameters | default({})).get('secretKey', record_entry.name),
                'remoteRef': {
                  'conversionStrategy': 'Default',
                  'decodingStrategy': (record_entry.extra_parameters | default({})).get('decodingStrategy', None),
                  'key': ns_name ~ '/' ~ service_name ~ '/' ~ path_name,
                  'metadataPolicy': 'None',
                  'property': record_entry.name
                }
              }
            ]
          )
        })
      }}
  loop: "{{ record_list }}"
  loop_control:
    loop_var: record_entry