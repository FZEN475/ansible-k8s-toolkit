#___auth:
#  server:                         # обязательно, не пустое
#  role_id:                        # обязательно, не пустое
#  jwt_token:                      # обязательно, не пустое
#  mount_point:                    # не обязательно: default "jwt"
#___path:                           # обязательно, не пустое
#___engine_mount_point:             # обязательно, не пустое
#___key_list:
#  - name: ""                      # обязательно, не пустое
#    method:                       # обязательно, один из вариантов ['present', 'absent']
#    value_type:                   # если method=='present': обязательно, один из вариантов ['generate', 'static', 'manual']
#    chars:                        # не обязательно: default ['ascii_lowercase', 'digits']
#    length:                       # не обязательно: default 8
#    value:                        # не обязательно: default ""
#    extra_parameters:             # не обязательно: default {}

- name: Validate input parameters
  vars:
    method_valid: ['present', 'absent']
    value_type_valid: ['generate', 'static', 'manual']
  block:
    - name: Validate server and authentication
      assert:
        that:
          - ___auth.server is defined and ___auth.server | length > 0
          - ___auth.role_id is defined and ___auth.role_id | length > 0
          - ___auth.jwt_token is defined and ___auth.jwt_token | length > 0
        fail_msg: "Ошибка: параметры авторизации (server, role_id, jwt_token) обязательны."
        success_msg: "Параметры авторизации проверены успешно."

    # --- Секция: пути ---
    - name: Validate paths
      assert:
        that:
          - ___path is not none and ___path | length > 0
          - ___engine_mount_point is defined and ___engine_mount_point | length > 0
        fail_msg: "Ошибка: обязательные параметры создания секрета ( ___path, __engine_mount_point) не заданы или пустые."
        success_msg: "Путь '___path' проверен успешно."

    - name: Validate key_list structure
      assert:
        that:
          - ___key_list is defined
          - ___key_list | type_debug == 'list'
          - ___key_list | length > 0
        fail_msg: "Ошибка: параметр ___key_list должен быть списком и содержать хотя бы один элемент."
        success_msg: "Структура ___key_list проверена успешно."

    - name: Validate each key item fields
      loop: "{{ ___key_list }}"
      loop_control:
        loop_var: key_item
      assert:
        that:
          - key_item.name is defined
          - key_item.name | length > 0
          - key_item.method is defined
          - key_item.method in method_valid
          - (key_item.method == 'absent') or
            (key_item.value_type is defined and key_item.value_type in value_type_valid)
        fail_msg: "Ошибка: каждый элемент ___key_list должен содержать непустые поля name, method (present|absent), value_type (generate|static|manual)."
        success_msg: "Элементы ___key_list содержат корректные поля."


- name: Get exist secret
  block:
    - name: Read
      community.hashi_vault.vault_kv2_get:
        url: "{{ ___auth.server }}"
        auth_method: 'jwt'
        role_id: "{{ ___auth.role_id }}"
        ca_cert: '/tmp/vault-ca.crt'
        jwt: '{{ ___auth.jwt_token }}'
        mount_point: "{{ ___auth.mount_point }}"
        engine_mount_point: "{{ ___engine_mount_point }}"
        path: "{{ ___path }}"
      register: __current
      ignore_errors: yes
      
    - name: Initialize new_data
      ansible.builtin.set_fact:
        new_data: "{{ __current.secret | default([]) }}"
      
    - name: Update new_data in one loop
      ansible.builtin.set_fact:
        new_data: >-
          {{
            new_data | combine(
              (key_item.method == 'present'
                and { (key_item.name): (
                  key_item.value_type == 'generate'
                  and lookup(
                    'ansible.builtin.password',
                    '/dev/null',
                    chars=(key_item.chars | default(['ascii_lowercase', 'digits'])),
                    length=(key_item.length | default(8))
                  )
                  or (key_item.value_type == 'static' and (key_item.value | default('')) or omit)
                )}
                or {}
              ),
              recursive=True
            )
            | dict2items
            | rejectattr('key', 'in', [key_item.name] if key_item.method == 'absent' else [])
            | items2dict
          }}
      loop: "{{ ___key_list }}"
      loop_control:
        loop_var: key_item
        label: "{{ key_item.name }}"
      
  rescue:
    - name: Explain failure
      ansible.builtin.fail:
        msg: >
          Ошибка при удалении секрета или получении токена.
          Детали: {{ ansible_failed_task.name }} — {{ ansible_failed_result.msg }}

- name: Debug new_data
  ansible.builtin.debug:
    var: new_data

- name: DELETE action
  block:
    - name: Get token from jwt
      ansible.builtin.uri:
        url: "{{ ___auth.server }}/v1/auth/{{ ___auth.mount_point }}/login"
        ca_path: '/tmp/vault-ca.crt'
        method: POST
        follow_redirects: all
        return_content: yes
        body_format: json
        body:
          jwt: "{{ ___auth.jwt_token }}"
          role: "{{ ___auth.role_id }}"
      register: login_response

    - name: Vault token
      ansible.builtin.set_fact:
        ___vault_token: "{{ login_response.json.auth.client_token }}"

    - name: Remove v2 secret
      ansible.builtin.uri:
        url: "{{ ___auth.server }}/v1/{{ ___engine_mount_point }}/metadata/{{ ___path }}"
        ca_path: '/tmp/vault-ca.crt'
        method: DELETE
        follow_redirects: all
        return_content: yes
        headers:
          X-Vault-Token: "{{ ___vault_token }}"
        status_code: [200, 204]
      register: remove_response

    - name: Debug remove_response
      ansible.builtin.debug:
        var: remove_response
        
  rescue:
    - name: Explain failure
      ansible.builtin.fail:
        msg: >
          Ошибка при удалении секрета или получении токена.
          Детали: {{ ansible_failed_task.name }} — {{ ansible_failed_result.msg }}
  when: new_data | length == 0



- name: Update action
  block:
    - name: Update v2 secret
      community.hashi_vault.vault_kv2_write:
        url: "{{ ___auth.server }}"
        auth_method: 'jwt'
        role_id: "{{ ___auth.role_id }}"
        ca_cert: '/tmp/vault-ca.crt'
        jwt: "{{ ___auth.jwt_token }}"
        mount_point: "{{ ___auth.mount_point }}"
        engine_mount_point: "{{ ___engine_mount_point }}"
        path: "{{ ___path }}"
        data: "{{ new_data }}"
  rescue:
    - name: Explain failure
      ansible.builtin.fail:
        msg: >
          Ошибка при обновлении секрета.
          Детали: {{ ansible_failed_task.name }} — {{ ansible_failed_result.msg }}
  when: new_data | length > 0

- name: Process and transform path list
  block:
    - name: Initialize transformed list
      ansible.builtin.set_fact:
        __kv2_transformed_list: []

    - name: Build transformed list for existing keys
      ansible.builtin.set_fact:
        __kv2_transformed_list: >-
          {{
            __kv2_transformed_list | default([]) + 
            [{
              'name': item.name,
              'extra_parameters': item.extra_parameters | default({})
            }]
          }}
      loop: "{{ ___key_list }}"
      when: item.name in new_data
      loop_control:
        label: "{{ item.name }}"

    - name: Update main path list
      ansible.builtin.set_fact:
        __kv2_path_list: >-
          {{
            __kv2_path_list | combine({
              ___engine_mount_point ~ '/' ~ ___path: __kv2_transformed_list
            })
          }}
  when: new_data | length > 0








