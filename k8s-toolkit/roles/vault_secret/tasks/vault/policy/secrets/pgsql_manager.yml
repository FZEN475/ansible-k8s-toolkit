#___auth:
#  server:                         # обязательно, не пустое
#  role_id:                        # обязательно, не пустое
#  jwt_token:                      # обязательно, не пустое
#  mount_point:                    # не обязательно: default "jwt"
#___db_con_role_name:              # обязательно, не пустое
#___engine_mount_point:            # обязательно, не пустое
#___type:                          # обязательно, один из вариантов ['role', 'static-role']
#___connection_name:               # обязательно, не пустое
#___method:                        # обязательно, один из вариантов ['present', 'absent']

#___db_username:                   # если __method=='present': обязательно, не пустое
#___rotation_statements:           # default ['ALTER USER {{{{username}}}} PASSWORD ''{{{{password}}}}''']
#___rotation_period:               # default 7 суток
#___extra_parameters               # не обязательно: default {}

- name: Validate input parameters
  block:
    - name: Validate server and authentication
      assert:
        that:
          - ___auth.server is defined and ___auth.server | length > 0
          - ___auth.role_id is defined and ___auth.role_id | length > 0
          - ___auth.jwt_token is defined and ___auth.jwt_token | length > 0
        fail_msg: "Ошибка: параметры авторизации (server, role_id, jwt_token) обязательны."
        success_msg: "Параметры авторизации проверены успешно."

    # === Базовые обязательные параметры ===
    - name: Validate database parameters
      vars:
        valid_methods: [ 'present', 'absent' ]
        valid_types: [ 'roles', 'static-roles' ]
      when: ___method == 'present'
      assert:
        that:
          - ___db_con_role_name is defined and ___db_con_role_name | length > 0
          - ___engine_mount_point is defined and ___engine_mount_point | length > 0
          - ___type is defined and ___type in valid_types
          - ___method is defined and ___method in valid_methods
          - ___connection_name is defined and ___connection_name | length > 0
          - ___db_username is defined and ___db_username | length > 0
        fail_msg: "Ошибка: обязательные параметры создания роли ( __db_con_role_name, __engine_mount_point, ___type, ___method, ___connection_name, ___db_username ) не заданы или пустые."
        success_msg: "Обязательные параметры создания роли проверены успешно."


- name: Remove action
  block:
    - name: Get connection
      community.hashi_vault.vault_database_connection_read:
        url: "{{ ___auth.server }}"
        auth_method: 'jwt'
        role_id: "{{ ___auth.role_id }}"
        ca_cert: '/tmp/vault-ca.crt'
        jwt: "{{ ___auth.jwt_token }}"
        mount_point: "{{ ___auth.mount_point }}"
        engine_mount_point: "{{ ___engine_mount_point }}"
        connection_name: "{{ ___connection_name }}"
      register: __connection

    - name: Debug __connection
      ansible.builtin.debug:
        var: __connection.data.allowed_roles

    - name: Initialize new_data without role
      ansible.builtin.set_fact:
        __allowed_roles: "{{ (__connection.data.allowed_roles | default([])) | difference([___db_con_role_name]) | unique }}"

    - name: Update connection allowed_roles
      community.hashi_vault.vault_write:
        url: "{{ ___auth.server }}"
        auth_method: 'jwt'
        role_id: "{{ ___auth.role_id }}"
        ca_cert: '/tmp/vault-ca.crt'
        jwt: "{{ ___auth.jwt_token }}"
        mount_point: "{{ ___auth.mount_point }}"
        path: "{{ ___engine_mount_point }}/config/{{ ___connection_name }}"
        data:
          allowed_roles: "{{ __allowed_roles }}"
      register: updated_connection

    - name: Get token from jwt
      ansible.builtin.uri:
        url: "{{ ___auth.server }}/v1/auth/{{ ___auth.mount_point }}/login"
        ca_path: '/tmp/vault-ca.crt'
        method: POST
        follow_redirects: all
        return_content: yes
        body_format: json
        body:
          jwt: "{{ ___auth.jwt_token }}"
          role: "{{ ___auth.role_id }}"
      register: login_response

    - name: Vault token
      ansible.builtin.set_fact:
        ___vault_token: "{{ login_response.json.auth.client_token }}"

    - name: Remove pgsql role
      ansible.builtin.uri:
        url: "{{ ___auth.server }}/v1/{{ ___engine_mount_point }}/{{ ___type }}/{{ ___db_con_role_name }}"
        ca_path: '/tmp/vault-ca.crt'
        method: DELETE
        follow_redirects: all
        return_content: yes
        headers:
          X-Vault-Token: "{{ ___vault_token }}"
        status_code: [200, 204]
      register: remove_response

    - name: Debug remove_response
      ansible.builtin.debug:
        var: remove_response

  when: ___method == 'absent'
  rescue:
    - name: Explain failure
      ansible.builtin.fail:
        msg: >
          Ошибка при удалении роли db коннектора.
          Детали: {{ ansible_failed_task.name }} — {{ ansible_failed_result.msg }}



- name: Update pgsql secret
  block:
    - name: Get connection
      community.hashi_vault.vault_database_connection_read:
        url: "{{ ___auth.server }}"
        auth_method: 'jwt'
        role_id: "{{ ___auth.role_id }}"
        ca_cert: '/tmp/vault-ca.crt'
        jwt: "{{ ___auth.jwt_token }}"
        mount_point: "{{ ___auth.mount_point }}"
        engine_mount_point: "{{ ___engine_mount_point }}"
        connection_name: "{{ ___connection_name }}"
      register: __connection

    - name: Initialize __allowed_roles
      ansible.builtin.set_fact:
        __allowed_roles: "{{ ((__connection.data.allowed_roles | default([])) + [___db_con_role_name]) | unique }}"

    - name: Debug __allowed_roles
      ansible.builtin.debug:
        var: __allowed_roles

    - name: Update connection allowed_roles
      community.hashi_vault.vault_write:
        url: "{{ ___auth.server }}"
        auth_method: 'jwt'
        role_id: "{{ ___auth.role_id }}"
        ca_cert: '/tmp/vault-ca.crt'
        jwt: "{{ ___auth.jwt_token }}"
        mount_point: "{{ ___auth.mount_point }}"
        path: "database/config/{{ ___connection_name }}"
        data:
          allowed_roles: "{{ __allowed_roles }}"
      register: updated_connection

    - name: Debug updated_connection
      ansible.builtin.debug:
        var: updated_connection

    - name: Debug ___rotation_statements
      ansible.builtin.debug:
        var: ___rotation_statements

    - name: Generate rotation statement
      ansible.builtin.set_fact:
        ___rotation_statements_tmp:
          - !unsafe "ALTER USER {{name}} WITH PASSWORD '{{password}}';"  

    - name: Generate rotation statement
      ansible.builtin.set_fact:
        ___rotation_statements_list: "{{ ___rotation_statements | default(___rotation_statements_tmp, true) }}"
      when: (___rotation_statements is not defined) or (___rotation_statements | default([]) | length == 0)

    - name: Debug ___rotation_statements_list
      ansible.builtin.debug:
        var: ___rotation_statements_list

    - name: Database role create
      community.hashi_vault.vault_database_static_role_create:
        url: "{{ ___auth.server }}"
        auth_method: 'jwt'
        role_id: "{{ ___auth.role_id }}"
        ca_cert: '/tmp/vault-ca.crt'
        jwt: "{{ ___auth.jwt_token }}"
        mount_point: "{{ ___auth.mount_point }}"
        engine_mount_point: "{{ ___engine_mount_point }}"
        role_name: "{{ ___db_con_role_name }}"
        connection_name: "{{ ___connection_name }}"
        db_username: "{{ ___db_username }}"
        rotation_statements: "{{ ___rotation_statements_list }}"
        rotation_period: "{{ ___rotation_period | default(604800,true) }}"

#    - name: Add full paths to __pgsql_path_list
#      vars:
#        __access_path:
#          roles: "creds"
#          static-roles: "static-creds"
#      ansible.builtin.set_fact:
#        __pgsql_path_list: >-
#          {{
#            __pgsql_path_list | combine({
#              ___engine_mount_point ~ '/' ~ __access_path[___type] ~ '/' ~ ___db_con_role_name: [{"name":'password',"extra_parameters": ___extra_parameters }] })
#          }}

    - name: Update main path list
      vars:
        __access_path:
          roles: "creds"
          static-roles: "static-creds"
      ansible.builtin.set_fact:
        __pgsql_path_list: >-
          {{
            __pgsql_path_list
            | combine({
                ___engine_mount_point: {
                  __access_path[___type]: {
                    ___db_con_role_name: [{"name":'password',"extra_parameters": ___extra_parameters }]
                  }
                }
              },
              recursive=True
            )
          }}
          

  when: ___method == 'present'
  rescue:
    - name: Explain failure
      ansible.builtin.fail:
        msg: >
          Ошибка при создании роли db коннектора.
          Детали: {{ ansible_failed_task.name }} — {{ ansible_failed_result.msg }}
